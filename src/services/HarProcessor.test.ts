import { describe, it, expect } from 'vitest';
import { HarProcessor } from './HarProcessor';

const mockHarContent = {
  log: {
    entries: [
      { request: { method: 'GET', url: 'https://example.com/style.css', headers: [] }, response: { status: 200, content: { mimeType: 'text/css' } } },
      { request: { method: 'GET', url: 'https://example.com/login', headers: [] }, response: { status: 200, content: { mimeType: 'text/html', text: '<input name="csrf_token" value="abc123" />' } } },
      { request: { method: 'POST', url: 'https://example.com/login', postData: { text: '{"username":"test","password":"test","csrf_token":"abc123"}' }, headers: [] }, response: { status: 200, content: { mimeType: 'application/json', text: '{"status":"success"}' } } },
      { request: { method: 'GET', url: 'https://unrelated.com/tracker.js', headers: [] }, response: { status: 200, content: { mimeType: 'application/javascript' } } },
    ],
  },
};

describe('HarProcessor', () => {
  it('should process a valid HAR file and return LoliCode', async () => {
    const harString = JSON.stringify(mockHarContent);
    const result = await HarProcessor.processHarFile(harString, 'https://example.com');
    
    expect(result.loliCode).toContain('BLOCK:Request "GET /login"');
    expect(result.loliCode).toContain('BLOCK:Request "POST /login"');
    expect(result.loliCode).toContain('BLOCK:Parse "Extract csrf_token"');
    expect(result.analysis.requestsFound).toBe(2);
    expect(result.analysis.tokensDetected).toBe(1);
  });

  it('should throw an error for an invalid target URL', async () => {
    const harString = JSON.stringify(mockHarContent);
    await expect(HarProcessor.processHarFile(harString, 'invalid-url'))
      .rejects.toThrow('Invalid Target URL provided. Please enter a valid URL to proceed.');
  });

  it('should throw an error when no requests match the target URL', async () => {
    const harString = JSON.stringify(mockHarContent);
    await expect(HarProcessor.processHarFile(harString, 'https://nonexistent.com'))
      .rejects.toThrow('No requests found for the target "nonexistent.com". Check the HAR file or Target URL.');
  });

  it('should throw an error for invalid JSON HAR content', async () => {
    const invalidHarString = 'this is not json';
    await expect(HarProcessor.processHarFile(invalidHarString, 'https://example.com'))
      .rejects.toThrow();
  });

  it('should correctly filter static resources', async () => {
    const harWithOnlyStatic = {
      log: {
        entries: [
          { request: { method: 'GET', url: 'https://example.com/style.css', headers: [] }, response: { status: 200, content: { mimeType: 'text/css' } } },
          { request: { method: 'GET', url: 'https://example.com/image.png', headers: [] }, response: { status: 200, content: { mimeType: 'image/png' } } },
        ],
      },
    };
    const harString = JSON.stringify(harWithOnlyStatic);
    const result = await HarProcessor.processHarFile(harString, 'https://example.com');
    
    expect(result.analysis.requestsFound).toBe(0);
    expect(result.loliCode).toBe('// Generated by HAR2LoliCode Automator\n// Review and adapt the configuration before use.\n');
  });
});
